class SpriteBaseClass extends Phaser.GameObjects.Sprite {

constructor (scene, x, y, texture)
{
    super(scene, x, y, texture);
	this.angularVelocity = 0;
	this.linearVelocityX = 0;
	this.linearVelocityY = 0;
	this.containerOffsetX = undefined;
	this.containerOffsetY = undefined;
	this.containerOffsetAngle = 0;
	this.baseReferenceX = 0;
	this.baseReferenceY = 0;
	this.baseReferenceAngle = 0;
	scene.add.existing(this);
	scene.spriteList.add(this);
}

getPosition() {
	// return a vector with this objects X and Y co-ordinate
	return this.getPositionX() + " " + this.getPositionY();
}

getPositionX() {
	return MathConvertUtil.convertToT2dX(this.baseReferenceX);
}

getPositionY() {
	return MathConvertUtil.convertToT2dY(this.baseReferenceY);
}

getLinearVelocity() {
	// return a vector with this objects X and Y velocities
	return this.getLinearVelocityX() + " " + this.getLinearVelocityY();
}

getLinearVelocityX() {
	return MathConvertUtil.convertToT2dWidth(this.linearVelocityX);
}

getLinearVelocityY() {
	return MathConvertUtil.convertToT2dHeight(this.linearVelocityY) * -1;
}

getSizeX() {
	return MathConvertUtil.convertToT2dWidth(this.displayWidth);
}

getSizeY() {
	return MathConvertUtil.convertToT2dHeight(this.displayHeight);
}

getAngle() {
	return this.baseReferenceAngle - 90;
}

setSize(width, height) {
	
	if (height || height === 0)
	{
		this.setDisplaySize(MathConvertUtil.convertToPhaserWidth(width), MathConvertUtil.convertToPhaserHeight(height));
	}
	else
	{
		this.setDisplaySize(MathConvertUtil.convertToPhaserWidth(width), MathConvertUtil.convertToPhaserHeight(width));
	}
}

setSizeX(width) {
	this.setDisplaySize(MathConvertUtil.convertToPhaserWidth(width), this.displayHeight);
}

setSizeY(height) {
	this.setDisplaySize(this.displayWidth, MathConvertUtil.convertToPhaserHeight(height));
}

setPosition(paramA, paramB) {
	
	// NOTE:  Sometimes this function will be called with one parameter, and this parameter will be a vector that we will
	// parse with T2dFunctionsUtil.getWord(paramA, 0), etc.  Other times, this function will be called with two parameters,
	// thus being an input with an X component and a Y component.  Will check to see if second param is 'defined', and
	// if it is, assume two params.  Otherwise, its one param (as a vector).
	
	if (paramB || paramB === 0)
	{
		var x = paramA;
		var y = paramB;
		
		this.setPositionX(x);
		this.setPositionY(y);
	}
	else
	{
		// Also note that Phaser itself sometimes takes just one param for this function, without a vector, just one value.
		// If this is the case then both x and y are this value.  Check for this case.
		
		var isSingleValPos = paramA.toString().indexOf(" ") === -1;
		
		if (isSingleValPos)
		{
			this.setPositionX(paramA);
			this.setPositionY(paramA);
		}
		else
		{
			var posAsVector = paramA;
			
			this.setPositionX(T2dFunctionsUtil.getWord(posAsVector, 0));
			this.setPositionY(T2dFunctionsUtil.getWord(posAsVector, 1));
		}
	}
}

setPositionX(x) {
	this.baseReferenceX = MathConvertUtil.convertToPhaserX(x);
}

setPositionY(y) {
	this.baseReferenceY = MathConvertUtil.convertToPhaserY(y);
}

setAngle(angleInDegrees) {
	this.baseReferenceAngle = angleInDegrees + 90;
	
	if (this.baseReferenceAngle > 360) {
		this.baseReferenceAngle = 360 - this.baseReferenceAngle;
	}
}

setAngularVelocity(angVelo) {
	this.angularVelocity = angVelo;
}

setLinearVelocityX(veloX) {
	this.linearVelocityX = MathConvertUtil.convertToPhaserWidth(veloX);
}

setLinearVelocityY(veloY) {
	this.linearVelocityY = MathConvertUtil.convertToPhaserHeight(veloY) * -1;
}

setContainerOffsetAngle(offsetAngleInDegrees) {
	this.containerOffsetAngle = offsetAngleInDegrees;
}

setContainerOffsetX(offsetX) {
	
	if (this.containerOffsetX === undefined)
	{
		this.baseReferenceX = this.baseReferenceX - MathConvertUtil.phaserProjectWidth / 2;
	}
	
	this.containerOffsetX = offsetX;
}

setContainerOffsetY(offsetY) {
	
	if (this.containerOffsetY === undefined)
	{
		this.baseReferenceY = this.baseReferenceY - MathConvertUtil.phaserProjectHeight / 2;
	}
	
	this.containerOffsetY = offsetY;
}

setLinearVelocity(paramA, paramB) {
	
	// NOTE:  Sometimes this function will be called with one parameter, and this parameter will be a vector that we will
	// parse with T2dFunctionsUtil.getWord(paramA, 0), etc.  Other times, this function will be called with two parameters,
	// thus being an input with an X component and a Y component.  Will check to see if second param is 'defined', and
	// if it is, assume two params.  Otherwise, its one param (as a vector).
	
	if (paramB || paramB === 0)
	{
		var veloX = paramA;
		var veloY = paramB;
		
		this.setLinearVelocityX(veloX);
		this.setLinearVelocityY(veloY)
	}
	else
	{
		var veloAsVector = paramA;
		
		this.setLinearVelocityX(T2dFunctionsUtil.getWord(veloAsVector, 0));
		this.setLinearVelocityY(T2dFunctionsUtil.getWord(veloAsVector, 1));
	}
}

extraUpdate(time, delta) {

	this.angle = this.baseReferenceAngle;
	this.x = this.baseReferenceX;
	this.y = this.baseReferenceY;
	
	this.angle += (delta / 1000) * this.angularVelocity;
	this.x += (delta / 1000) * this.linearVelocityX;
	this.y += (delta / 1000) * this.linearVelocityY;
	
	if (this.angle > 360) {
		this.angle = 360 - this.angle;
	}
	
	this.baseReferenceAngle = this.angle;
	this.baseReferenceX = this.x;
	this.baseReferenceY = this.y;
	
	this.angle += this.containerOffsetAngle;
	
	if (this.containerOffsetX !== undefined)
	{
		this.x += this.containerOffsetX;
	}
	
	if (this.containerOffsetY !== undefined)
	{
		this.y += this.containerOffsetY;
	}
	
}

}