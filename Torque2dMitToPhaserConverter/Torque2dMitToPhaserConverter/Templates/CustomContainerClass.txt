class CustomContainerClass {
	
constructor (scene)
{
	this.list = new PhaserSimSetClass();
	
	this.x = -1000;
	this.y = -1000;
	this.angle = 0;
	this.angularVelocity = 0;
	this.linearVelocityX = 0;
	this.linearVelocityY = 0;
	
	scene.containerList.add(this);
}

add(object)
{
	this.list.add(object);
}

remove(object)
{
	this.list.remove(object);
}

getPosition() {
	// return a vector with this objects X and Y co-ordinate
	return this.getPositionX() + " " + this.getPositionY();
}

getPositionX() {
	return MathConvertUtil.convertToT2dX(this.x);
}

getPositionY() {
	return MathConvertUtil.convertToT2dY(this.y);
}

getAngle() {
	return this.angle - 90;
}

/*
setSize(width, height) {
	this.setDisplaySize(MathConvertUtil.convertToPhaserWidth(width), MathConvertUtil.convertToPhaserHeight(height));
}*/

setPosition(paramA, paramB) {
	
	// NOTE:  Sometimes this function will be called with one parameter, and this parameter will be a vector that we will
	// parse with T2dFunctionsUtil.getWord(paramA, 0), etc.  Other times, this function will be called with two parameters,
	// thus being an input with an X component and a Y component.  Will check to see if second param is 'defined', and
	// if it is, assume two params.  Otherwise, its one param (as a vector).
	
	if (paramB || paramB === 0)
	{
		var x = paramA;
		var y = paramB;
		
		this.setPositionX(x);
		this.setPositionY(y);
	}
	else
	{
		// Also note that Phaser itself sometimes takes just one param for this function, without a vector, just one value.
		// If this is the case then both x and y are this value.  Check for this case.
		
		var isSingleValPos = paramA.toString().indexOf(" ") === -1;
		
		if (isSingleValPos)
		{
			this.setPositionX(paramA);
			this.setPositionY(paramA);
		}
		else
		{
			var posAsVector = paramA;
			
			this.setPositionX(T2dFunctionsUtil.getWord(posAsVector, 0));
			this.setPositionY(T2dFunctionsUtil.getWord(posAsVector, 1));
		}
	}
}

setPositionX(x) {
	this.x = MathConvertUtil.convertToPhaserX(x);
}

setPositionY(y) {
	this.y = MathConvertUtil.convertToPhaserY(y);
}

setAngle(angleInDegrees) {
	super.setAngle(angleInDegrees + 90);
}

setAngularVelocity(angVelo) {
	this.angularVelocity = angVelo;
}

setLinearVelocityX(veloX) {
	this.linearVelocityX = MathConvertUtil.convertToPhaserWidth(veloX);
}

setLinearVelocityY(veloY) {
	this.linearVelocityY = MathConvertUtil.convertToPhaserHeight(veloY) * -1;
}

setLinearVelocity(paramA, paramB) {
	
	// NOTE:  Sometimes this function will be called with one parameter, and this parameter will be a vector that we will
	// parse with T2dFunctionsUtil.getWord(paramA, 0), etc.  Other times, this function will be called with two parameters,
	// thus being an input with an X component and a Y component.  Will check to see if second param is 'defined', and
	// if it is, assume two params.  Otherwise, its one param (as a vector).
	
	if (paramB || paramB === 0)
	{
		var veloX = paramA;
		var veloY = paramB;
		
		this.setLinearVelocityX(veloX);
		this.setLinearVelocityY(veloY)
	}
	else
	{
		var veloAsVector = paramA;
		
		this.setLinearVelocityX(T2dFunctionsUtil.getWord(veloAsVector, 0));
		this.setLinearVelocityY(T2dFunctionsUtil.getWord(veloAsVector, 1));
	}
}

extraUpdate(time, delta) {
	this.angle += (delta / 1000) * this.angularVelocity;
	this.x += (delta / 1000) * this.linearVelocityX;
	this.y += (delta / 1000) * this.linearVelocityY;
	
	for (var i = 0; i < this.list.getCount(); i++)
	{
		var item = this.list.getObject(i);
		
		item.setContainerOffsetAngle(this.angle);
		item.setContainerOffsetX(this.x);
		item.setContainerOffsetY(this.y);
	}
}

}

